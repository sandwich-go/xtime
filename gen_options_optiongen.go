// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package xtime

import (
	"io"
	"os"
	"time"
)

// Options should use NewOptions to initialize it
type Options struct {
	// annotation@Gosched(comment="Gosched让出CPU防止忙占")
	Gosched func()
	// annotation@TickIntervalUnderMock(comment="真实的tick时间间隔，用于驱动mock模式下的tiker、timer")
	TickIntervalUnderMock time.Duration
	// annotation@TickAtMockNow(comment="timer,ticker在tick的时间为mock的当前时间，而不是Next时间，如果为Next时间,在时间跳转后会导致循环执行同一个ticker,timer")
	TickAtMockNow bool
	// annotation@NowProvider(comment="系统时间")
	NowProvider NowProvider
	// annotation@Debug(comment="debug模式下以会向DebugWriter写日志")
	Debug bool
	// annotation@DebugWriter(comment="调试日志输出")
	DebugWriter io.Writer
}

// NewOptions new Options
func NewOptions(opts ...Option) *Options {
	cc := newDefaultOptions()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogOptions != nil {
		watchDogOptions(cc)
	}
	return cc
}

// ApplyOption apply mutiple new option and return the old ones
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *Options) ApplyOption(opts ...Option) []Option {
	var previous []Option
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// Option option func
type Option func(cc *Options) Option

// WithGosched Gosched让出CPU防止忙占
func WithGosched(v func()) Option {
	return func(cc *Options) Option {
		previous := cc.Gosched
		cc.Gosched = v
		return WithGosched(previous)
	}
}

// WithTickIntervalUnderMock 真实的tick时间间隔，用于驱动mock模式下的tiker、timer
func WithTickIntervalUnderMock(v time.Duration) Option {
	return func(cc *Options) Option {
		previous := cc.TickIntervalUnderMock
		cc.TickIntervalUnderMock = v
		return WithTickIntervalUnderMock(previous)
	}
}

// WithTickAtMockNow timer,ticker在tick的时间为mock的当前时间，而不是Next时间，如果为Next时间,在时间跳转后会导致循环执行同一个ticker,timer
func WithTickAtMockNow(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.TickAtMockNow
		cc.TickAtMockNow = v
		return WithTickAtMockNow(previous)
	}
}

// WithNowProvider 系统时间
func WithNowProvider(v NowProvider) Option {
	return func(cc *Options) Option {
		previous := cc.NowProvider
		cc.NowProvider = v
		return WithNowProvider(previous)
	}
}

// WithDebug debug模式下以会向DebugWriter写日志
func WithDebug(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.Debug
		cc.Debug = v
		return WithDebug(previous)
	}
}

// WithDebugWriter 调试日志输出
func WithDebugWriter(v io.Writer) Option {
	return func(cc *Options) Option {
		previous := cc.DebugWriter
		cc.DebugWriter = v
		return WithDebugWriter(previous)
	}
}

// InstallOptionsWatchDog the installed func will called when NewOptions  called
func InstallOptionsWatchDog(dog func(cc *Options)) { watchDogOptions = dog }

// watchDogOptions global watch dog
var watchDogOptions func(cc *Options)

// newDefaultOptions new default Options
func newDefaultOptions() *Options {
	cc := &Options{}

	for _, opt := range [...]Option{
		WithGosched(func() {
			timeSleep(1 * time.Millisecond)
		}),
		WithTickIntervalUnderMock(time.Millisecond),
		WithTickAtMockNow(false),
		WithNowProvider(func() time.Time {
			return timeNow()
		}),
		WithDebug(false),
		WithDebugWriter(os.Stdout),
	} {
		opt(cc)
	}

	return cc
}

// all getter func
func (cc *Options) GetGosched() func()                      { return cc.Gosched }
func (cc *Options) GetTickIntervalUnderMock() time.Duration { return cc.TickIntervalUnderMock }
func (cc *Options) GetTickAtMockNow() bool                  { return cc.TickAtMockNow }
func (cc *Options) GetNowProvider() NowProvider             { return cc.NowProvider }
func (cc *Options) GetDebug() bool                          { return cc.Debug }
func (cc *Options) GetDebugWriter() io.Writer               { return cc.DebugWriter }

// OptionsVisitor visitor interface for Options
type OptionsVisitor interface {
	GetGosched() func()
	GetTickIntervalUnderMock() time.Duration
	GetTickAtMockNow() bool
	GetNowProvider() NowProvider
	GetDebug() bool
	GetDebugWriter() io.Writer
}

// OptionsInterface visitor + ApplyOption interface for Options
type OptionsInterface interface {
	OptionsVisitor
	ApplyOption(...Option) []Option
}
